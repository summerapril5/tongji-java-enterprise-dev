{
  "fileName": "FileToJson.java",
  "filePath": "\\src\\main\\java\\com\\example\\demo\\util",
  "information": [
    {
      "time": "2024-10-09T14:02:15.354567800",
      "content": "package com.example.demo.util;\r\n\r\nimport com.example.demo.structure.OneVersionInfo;\r\nimport com.fasterxml.jackson.databind.JsonNode;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport com.fasterxml.jackson.databind.ObjectWriter;\r\nimport com.fasterxml.jackson.databind.node.ArrayNode;\r\nimport com.fasterxml.jackson.databind.node.ObjectNode;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.GsonBuilder;\r\nimport com.intellij.openapi.command.WriteCommandAction;\r\nimport com.intellij.openapi.project.Project;\r\nimport com.intellij.openapi.vfs.LocalFileSystem;\r\nimport com.intellij.openapi.vfs.VirtualFile;\r\nimport com.intellij.psi.PsiFile;\r\nimport com.intellij.psi.PsiManager;\r\nimport com.intellij.refactoring.rename.RenameProcessor;\r\n\r\nimport java.io.IOException;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.nio.file.Paths;\r\nimport java.time.LocalDateTime;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class FileToJson {\r\n    //用于解析json数据\r\n    private static final ObjectMapper objectMapper \u003d new ObjectMapper();\r\n\r\n    //负责将一个文件转化为json数据\r\n    static public void oneFileToJson(VirtualFile file, String directoryPath) throws IOException {\r\n        String projectBasePath \u003d ProjectManager.getProject().getBasePath();\r\n        Path codeHistoryDir \u003d Paths.get(projectBasePath, \"CodeHistory\");\r\n\r\n        String fileNameWithoutExtension \u003d file.getNameWithoutExtension();\r\n        String jsonFileName \u003d fileNameWithoutExtension + \u0027_\u0027+ directoryPath.replace(\"\\\\\", \"\") + \".json\";\r\n        Path jsonFilePath \u003d codeHistoryDir.resolve(jsonFileName);\r\n\r\n        if (!Files.exists(codeHistoryDir)) {\r\n            try {\r\n                Files.createDirectories(codeHistoryDir);\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n                throw new RuntimeException(\"Failed to create CodeHistory directory\", e);\r\n            }\r\n        }\r\n\r\n        if(Files.exists(jsonFilePath)){\r\n            addVersionJson(jsonFilePath, file);\r\n        }else{\r\n            createNewJson(jsonFilePath, file, directoryPath);\r\n        }\r\n    }\r\n\r\n    //创建一个新的json文件\r\n    static public void createNewJson(Path jsonFilePath, VirtualFile file, String directoryPath){\r\n        Map\u003cString, Object\u003e fileInfo \u003d new HashMap\u003c\u003e();\r\n        fileInfo.put(\"version\", 0);\r\n        fileInfo.put(\"fileName\", file.getName());\r\n        fileInfo.put(\"filePath\", directoryPath);\r\n        try {\r\n            ArrayList\u003cOneVersionInfo\u003e information \u003d new ArrayList\u003c\u003e();\r\n            OneVersionInfo oneversioninfo \u003d new OneVersionInfo(LocalDateTime.now().toString(),readFileContent(file));\r\n            information.add(oneversioninfo);\r\n            fileInfo.put(\"information\", information);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n            fileInfo.put(\"information\", \"Error reading file content\");\r\n        }\r\n\r\n        Gson gson \u003d new GsonBuilder().setPrettyPrinting().create();\r\n        String jsonString \u003d gson.toJson(fileInfo);\r\n\r\n        try {\r\n            Files.write(jsonFilePath, jsonString.getBytes());\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n            throw new RuntimeException(\"Failed to write JSON file\", e);\r\n        }\r\n    }\r\n\r\n    //在对应json文件后添加新的版本\r\n    static public void addVersionJson(Path jsonFilePath, VirtualFile file) throws IOException {\r\n        String jsonContent \u003d new String(Files.readAllBytes(jsonFilePath));\r\n        JsonNode rootNode \u003d objectMapper.readTree(jsonContent);\r\n\r\n        ObjectNode rootObject \u003d (ObjectNode) rootNode;\r\n        JsonNode informationNode \u003d rootObject.get(\"information\");\r\n        ArrayNode informationArray \u003d (ArrayNode) informationNode;\r\n        String content \u003d informationArray.get(informationArray.size() - 1).get(\"content\").asText();\r\n\r\n        String fileContent \u003d readFileContent(file);\r\n        if (!fileContent.equals(content)) {\r\n            OneVersionInfo oneversioninfo \u003d new OneVersionInfo(LocalDateTime.now().toString(),fileContent);\r\n            ObjectNode objectNode \u003d objectMapper.valueToTree(oneversioninfo);\r\n            informationArray.add(objectNode);\r\n\r\n            JsonNode versionNode \u003d rootObject.get(\"version\");\r\n            int version \u003d versionNode.asInt();\r\n            rootObject.put(\"version\", version + 1);\r\n            ObjectWriter writer \u003d objectMapper.writerWithDefaultPrettyPrinter();\r\n            String updatedJsonContent \u003d writer.writeValueAsString(rootObject);\r\n            Files.write(jsonFilePath, updatedJsonContent.getBytes());\r\n        }\r\n    }\r\n\r\n    //修改文件路径时对json的修改\r\n    static public void reviseFilePath(Path oldfilePath,Path newfilePath,String fileName) throws IOException {\r\n        String oldRelativePath\u003dFileManager.getRelativePath(oldfilePath);\r\n        String newRelativePath\u003dFileManager.getRelativePath(newfilePath);\r\n        String oldJsonName\u003dfileName+\u0027_\u0027+oldRelativePath.replace(\"\\\\\", \"\")+\".json\";\r\n        String newJsonName\u003dfileName+\u0027_\u0027+newRelativePath.replace(\"\\\\\", \"\")+\".json\";\r\n\r\n        //获取json路径\r\n        String projectBasePath \u003d ProjectManager.getProject().getBasePath();\r\n        Path codeHistoryDir \u003d Paths.get(projectBasePath, \"CodeHistory\");\r\n        Path jsonFilePath \u003d codeHistoryDir.resolve(oldJsonName);\r\n\r\n        //获取与写回数据\r\n        String jsonContent \u003d new String(Files.readAllBytes(jsonFilePath));\r\n        JsonNode rootNode \u003d objectMapper.readTree(jsonContent);\r\n        ObjectNode rootObject \u003d (ObjectNode) rootNode;\r\n        rootObject.put(\"filePath\", newRelativePath);\r\n        ObjectWriter writer \u003d objectMapper.writerWithDefaultPrettyPrinter();\r\n        String updatedJsonContent \u003d writer.writeValueAsString(rootObject);\r\n        Files.write(jsonFilePath, updatedJsonContent.getBytes());\r\n\r\n        //修改json文件名\r\n        VirtualFile jsonFile\u003dLocalFileSystem.getInstance().findFileByPath(jsonFilePath.toString().replace(\"\\\\\", \"/\"));\r\n        Project project\u003dProjectManager.getProject();\r\n        PsiManager psiManager \u003d PsiManager.getInstance(project);\r\n        PsiFile psiFile \u003d psiManager.findFile(jsonFile);\r\n        WriteCommandAction.runWriteCommandAction(project, () -\u003e {\r\n            RenameProcessor renameProcessor \u003d new RenameProcessor(project, psiFile, newJsonName, false, false);\r\n            renameProcessor.run();\r\n        });\r\n    }\r\n\r\n    //用于读取文件内容\r\n    static public String readFileContent(VirtualFile file) throws IOException {\r\n        byte[] contentBytes \u003d file.contentsToByteArray();\r\n        return new String(contentBytes);\r\n    }\r\n\r\n    // 递归遍历整个文件，在打开项目时使用\r\n    static public void traverseDirectory(VirtualFile dir, String currentPath) throws IOException {\r\n        if (!dir.getName().equals(\"CodeHistory\")) {\r\n            for (VirtualFile child : dir.getChildren()) {\r\n                String childPath \u003d currentPath + \"\\\\\" + child.getName();\r\n                if (child.isDirectory()) {\r\n                    traverseDirectory(child, childPath);\r\n                } else if(child.getName().endsWith(\".java\")){\r\n                    oneFileToJson(child, currentPath);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    }
  ],
  "version": 0
}