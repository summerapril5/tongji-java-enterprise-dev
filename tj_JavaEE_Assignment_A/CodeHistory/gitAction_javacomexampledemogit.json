{
  "fileName" : "gitAction.java",
  "filePath" : "\\java\\com\\example\\demo\\git",
  "information" : [ {
    "time" : "2024-10-16T09:44:57.738737400",
    "content" : "package com.example.demo.git;\r\n\r\n\r\nimport com.example.demo.util.FileManager;\r\nimport org.eclipse.jgit.api.Git;\r\nimport org.eclipse.jgit.api.errors.GitAPIException;\r\nimport org.eclipse.jgit.lib.Repository;\r\nimport java.io.IOException;\r\nimport org.eclipse.jgit.storage.file.FileRepositoryBuilder;\r\nimport java.io.File;\r\nimport org.eclipse.jgit.revwalk.RevCommit;\r\n\r\npublic class gitAction {\r\n\r\n    public static void createBranch(Git git) throws GitAPIException {\r\n        git.branchCreate().setName(\"fineGrained\").call();\r\n        git.checkout().setName(\"fineGrained\").call();\r\n    }\r\n\r\n    public static void commit(Git git) throws GitAPIException {\r\n        git.add().call();\r\n        git.commit().setMessage(\"commit\").call();\r\n    }\r\n\r\n    public static void mergeLast(Git git,String oldBranch) throws GitAPIException {\r\n        Iterable<RevCommit> log = git.log().setMaxCount(1).call();\r\n        RevCommit lastCommit = log.iterator().next();\r\n        git.checkout().setName(oldBranch).call();\r\n        git.cherryPick().include(lastCommit).call();\r\n    }\r\n\r\n\r\n}\r\n"
  }, {
    "time" : "2024-10-16T10:49:56.932572200",
    "content" : "package com.example.demo.git;\r\n\r\n\r\nimport com.example.demo.util.FileManager;\r\nimport org.eclipse.jgit.api.Git;\r\nimport org.eclipse.jgit.api.errors.GitAPIException;\r\nimport org.eclipse.jgit.lib.Repository;\r\nimport java.io.IOException;\r\nimport org.eclipse.jgit.storage.file.FileRepositoryBuilder;\r\nimport java.io.File;\r\nimport org.eclipse.jgit.revwalk.RevCommit;\r\n\r\npublic class gitAction {\r\n\r\n    public static void createBranch(Git git) throws GitAPIException {\r\n        git.branchCreate().setName(\"fineGrained\").call();\r\n        System.out.println(\"Branch created\");\r\n        git.checkout().setName(\"fineGrained\").call();\r\n        System.out.println(\"Checkout created\");\r\n    }\r\n\r\n    public static void commit(Git git) throws GitAPIException {\r\n        git.add().call();\r\n        git.commit().setMessage(\"commit\").call();\r\n    }\r\n\r\n    public static void mergeLast(Git git,String oldBranch) throws GitAPIException {\r\n        Iterable<RevCommit> log = git.log().setMaxCount(1).call();\r\n        RevCommit lastCommit = log.iterator().next();\r\n        git.checkout().setName(oldBranch).call();\r\n        git.cherryPick().include(lastCommit).call();\r\n    }\r\n\r\n\r\n}\r\n"
  }, {
    "time" : "2024-10-16T10:52:02.265668300",
    "content" : "package com.example.demo.git;\r\n\r\n\r\nimport com.example.demo.util.FileManager;\r\nimport org.eclipse.jgit.api.Git;\r\nimport org.eclipse.jgit.api.errors.GitAPIException;\r\nimport org.eclipse.jgit.lib.Repository;\r\nimport java.io.IOException;\r\nimport org.eclipse.jgit.storage.file.FileRepositoryBuilder;\r\nimport java.io.File;\r\nimport org.eclipse.jgit.revwalk.RevCommit;\r\n\r\npublic class gitAction {\r\n\r\n    public static void createBranch(Git git) throws GitAPIException {\r\n        System.out.println(\"进入createBranch函数\");\r\n        git.branchCreate().setName(\"fineGrained\").call();\r\n        System.out.println(\"Branch created\");\r\n        git.checkout().setName(\"fineGrained\").call();\r\n        System.out.println(\"Checkout created\");\r\n    }\r\n\r\n    public static void commit(Git git) throws GitAPIException {\r\n        git.add().call();\r\n        git.commit().setMessage(\"commit\").call();\r\n    }\r\n\r\n    public static void mergeLast(Git git,String oldBranch) throws GitAPIException {\r\n        Iterable<RevCommit> log = git.log().setMaxCount(1).call();\r\n        RevCommit lastCommit = log.iterator().next();\r\n        git.checkout().setName(oldBranch).call();\r\n        git.cherryPick().include(lastCommit).call();\r\n    }\r\n\r\n\r\n}\r\n"
  } ],
  "version" : 2
}