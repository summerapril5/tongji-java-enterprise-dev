{
  "fileName" : "initialGitCommit.java",
  "filePath" : "\\java\\com\\example\\demo\\git",
  "information" : [ {
    "time" : "2024-10-16T09:44:57.750840600",
    "content" : "package com.example.demo.git;\r\n\r\nimport com.intellij.openapi.actionSystem.AnAction;\r\nimport com.intellij.openapi.actionSystem.AnActionEvent;\r\nimport groovyjarjarantlr4.v4.runtime.misc.NotNull;\r\nimport org.eclipse.jgit.api.errors.GitAPIException;\r\n\r\nimport java.io.IOException;\r\nimport java.util.concurrent.Executors;\r\nimport java.util.concurrent.ScheduledExecutorService;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.logging.Logger;\r\n\r\npublic class initialGitCommit extends AnAction {\r\n\r\n\r\n    private static final Logger logger = Logger.getLogger(initialGitCommit.class.getName());\r\n    private boolean isRunning = false;\r\n    private ScheduledExecutorService scheduler;\r\n    private static String oldBranch;\r\n\r\n    @Override\r\n    public void actionPerformed(AnActionEvent e) {\r\n        try{\r\n            if (isRunning) {\r\n                stopScheduler();\r\n            } else {\r\n                startScheduler();\r\n            }\r\n            isRunning = !isRunning;\r\n        }\r\n        catch (GitAPIException ex){\r\n            ex.printStackTrace();\r\n        }\r\n        catch (IOException ex2){\r\n            ex2.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void startScheduler() {\r\n        try {\r\n            initGit();\r\n            scheduler = Executors.newScheduledThreadPool(1);\r\n            scheduler.scheduleAtFixedRate(() -> {\r\n                try {\r\n                    Commit();\r\n                } catch (GitAPIException | IOException e) {\r\n                    // 处理异常，例如打印日志\r\n                    e.printStackTrace();\r\n                }\r\n            }, 0, 10, TimeUnit.SECONDS);\r\n        } catch (GitAPIException | IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void initGit() throws GitAPIException, IOException {\r\n        oldBranch = gitRepository.getInstance().getRepository().getBranch();\r\n        gitAction.createBranch(gitRepository.getInstance());\r\n    }\r\n\r\n    public void Commit() throws GitAPIException, IOException {\r\n        gitAction.commit(gitRepository.getInstance());\r\n    }\r\n\r\n    public void stopScheduler() throws GitAPIException, IOException {\r\n        if (scheduler != null && !scheduler.isShutdown()) {\r\n            scheduler.shutdownNow();\r\n        }\r\n        gitAction.mergeLast(gitRepository.getInstance(), oldBranch);\r\n    }\r\n\r\n    @Override\r\n    public void update(@NotNull AnActionEvent e) {\r\n        e.getPresentation().setText(isRunning ? \"停止定时commit\" : \"启动定时commit\");\r\n    }\r\n\r\n}\r\n"
  }, {
    "time" : "2024-10-16T09:56:48.364232500",
    "content" : "package com.example.demo.git;\r\n\r\nimport com.intellij.openapi.actionSystem.AnAction;\r\nimport com.intellij.openapi.actionSystem.AnActionEvent;\r\nimport groovyjarjarantlr4.v4.runtime.misc.NotNull;\r\nimport org.eclipse.jgit.api.errors.GitAPIException;\r\n\r\nimport java.io.IOException;\r\nimport java.util.concurrent.Executors;\r\nimport java.util.concurrent.ScheduledExecutorService;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.logging.Logger;\r\n\r\npublic class initialGitCommit extends AnAction {\r\n\r\n\r\n    private static final Logger logger = Logger.getLogger(initialGitCommit.class.getName());\r\n    private boolean isRunning = false;\r\n    private ScheduledExecutorService scheduler;\r\n    private static String oldBranch;\r\n\r\n    @Override\r\n    public void actionPerformed(AnActionEvent e) {\r\n        System.out.println(\"开始InitialGitCommit\");\r\n        try{\r\n            if (isRunning) {\r\n                stopScheduler();\r\n            } else {\r\n                startScheduler();\r\n            }\r\n            isRunning = !isRunning;\r\n        }\r\n        catch (GitAPIException ex){\r\n            ex.printStackTrace();\r\n        }\r\n        catch (IOException ex2){\r\n            ex2.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void startScheduler() {\r\n        try {\r\n            initGit();\r\n            scheduler = Executors.newScheduledThreadPool(1);\r\n            scheduler.scheduleAtFixedRate(() -> {\r\n                try {\r\n                    Commit();\r\n                } catch (GitAPIException | IOException e) {\r\n                    // 处理异常，例如打印日志\r\n                    e.printStackTrace();\r\n                }\r\n            }, 0, 10, TimeUnit.SECONDS);\r\n        } catch (GitAPIException | IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void initGit() throws GitAPIException, IOException {\r\n        oldBranch = gitRepository.getInstance().getRepository().getBranch();\r\n        gitAction.createBranch(gitRepository.getInstance());\r\n    }\r\n\r\n    public void Commit() throws GitAPIException, IOException {\r\n        gitAction.commit(gitRepository.getInstance());\r\n    }\r\n\r\n    public void stopScheduler() throws GitAPIException, IOException {\r\n        if (scheduler != null && !scheduler.isShutdown()) {\r\n            scheduler.shutdownNow();\r\n        }\r\n        gitAction.mergeLast(gitRepository.getInstance(), oldBranch);\r\n    }\r\n\r\n    @Override\r\n    public void update(@NotNull AnActionEvent e) {\r\n        e.getPresentation().setText(isRunning ? \"停止定时commit\" : \"启动定时commit\");\r\n    }\r\n\r\n}\r\n"
  }, {
    "time" : "2024-10-16T10:05:26.748764",
    "content" : "package com.example.demo.git;\r\n\r\nimport com.intellij.openapi.actionSystem.AnAction;\r\nimport com.intellij.openapi.actionSystem.AnActionEvent;\r\nimport groovyjarjarantlr4.v4.runtime.misc.NotNull;\r\nimport org.eclipse.jgit.api.errors.GitAPIException;\r\n\r\nimport java.io.IOException;\r\nimport java.util.concurrent.Executors;\r\nimport java.util.concurrent.ScheduledExecutorService;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\npublic class initialGitCommit extends AnAction {\r\n\r\n\r\n    private boolean isRunning = false;\r\n    private ScheduledExecutorService scheduler;\r\n    private static String oldBranch;\r\n\r\n    @Override\r\n    public void actionPerformed(AnActionEvent e) {\r\n        System.out.println(\"开始InitialGitCommit\");\r\n        try{\r\n            if (isRunning) {\r\n                System.out.println(\"isRunning\");\r\n                stopScheduler();\r\n            } else {\r\n                System.out.println(\"notRunning\");\r\n                startScheduler();\r\n            }\r\n            isRunning = !isRunning;\r\n        }\r\n        catch (GitAPIException ex){\r\n            ex.printStackTrace();\r\n        }\r\n        catch (IOException ex2){\r\n            ex2.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void startScheduler() {\r\n        try {\r\n            initGit();\r\n            scheduler = Executors.newScheduledThreadPool(1);\r\n            scheduler.scheduleAtFixedRate(() -> {\r\n                try {\r\n                    Commit();\r\n                } catch (GitAPIException | IOException e) {\r\n                    // 处理异常，例如打印日志\r\n                    e.printStackTrace();\r\n                }\r\n            }, 0, 10, TimeUnit.SECONDS);\r\n        } catch (GitAPIException | IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void initGit() throws GitAPIException, IOException {\r\n        System.out.println(\"initGit\");\r\n        oldBranch = gitRepository.getInstance().getRepository().getBranch();\r\n        gitAction.createBranch(gitRepository.getInstance());\r\n    }\r\n\r\n    public void Commit() throws GitAPIException, IOException {\r\n        gitAction.commit(gitRepository.getInstance());\r\n    }\r\n\r\n    public void stopScheduler() throws GitAPIException, IOException {\r\n        if (scheduler != null && !scheduler.isShutdown()) {\r\n            scheduler.shutdownNow();\r\n        }\r\n        gitAction.mergeLast(gitRepository.getInstance(), oldBranch);\r\n    }\r\n\r\n    @Override\r\n    public void update(@NotNull AnActionEvent e) {\r\n        e.getPresentation().setText(isRunning ? \"停止定时commit\" : \"启动定时commit\");\r\n    }\r\n\r\n}\r\n"
  }, {
    "time" : "2024-10-16T10:07:45.605185",
    "content" : "package com.example.demo.git;\r\n\r\nimport com.intellij.openapi.actionSystem.AnAction;\r\nimport com.intellij.openapi.actionSystem.AnActionEvent;\r\nimport groovyjarjarantlr4.v4.runtime.misc.NotNull;\r\nimport org.eclipse.jgit.api.errors.GitAPIException;\r\n\r\nimport java.io.IOException;\r\nimport java.util.concurrent.Executors;\r\nimport java.util.concurrent.ScheduledExecutorService;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\npublic class initialGitCommit extends AnAction {\r\n\r\n\r\n    private boolean isRunning = false;\r\n    private ScheduledExecutorService scheduler;\r\n    private static String oldBranch;\r\n\r\n    @Override\r\n    public void actionPerformed(AnActionEvent e) {\r\n        System.out.println(\"开始InitialGitCommit\");\r\n        try{\r\n            if (isRunning) {\r\n                System.out.println(\"isRunning\");\r\n                stopScheduler();\r\n            } else {\r\n                System.out.println(\"notRunning\");\r\n                startScheduler();\r\n            }\r\n            isRunning = !isRunning;\r\n        }\r\n        catch (GitAPIException ex){\r\n            ex.printStackTrace();\r\n        }\r\n        catch (IOException ex2){\r\n            ex2.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void startScheduler() {\r\n        try {\r\n            initGit();\r\n            scheduler = Executors.newScheduledThreadPool(1);\r\n            scheduler.scheduleAtFixedRate(() -> {\r\n                try {\r\n                    Commit();\r\n                } catch (GitAPIException | IOException e) {\r\n                    // 处理异常，例如打印日志\r\n                    e.printStackTrace();\r\n                }\r\n            }, 0, 10, TimeUnit.SECONDS);\r\n        } catch (GitAPIException | IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void initGit() throws GitAPIException, IOException {\r\n        System.out.println(\"initGit\");\r\n        oldBranch = gitRepository.getInstance().getRepository().getBranch();\r\n        System.out.println(\"getbranch\");\r\n        gitAction.createBranch(gitRepository.getInstance());\r\n    }\r\n\r\n    public void Commit() throws GitAPIException, IOException {\r\n        gitAction.commit(gitRepository.getInstance());\r\n    }\r\n\r\n    public void stopScheduler() throws GitAPIException, IOException {\r\n        if (scheduler != null && !scheduler.isShutdown()) {\r\n            scheduler.shutdownNow();\r\n        }\r\n        gitAction.mergeLast(gitRepository.getInstance(), oldBranch);\r\n    }\r\n\r\n    @Override\r\n    public void update(@NotNull AnActionEvent e) {\r\n        e.getPresentation().setText(isRunning ? \"停止定时commit\" : \"启动定时commit\");\r\n    }\r\n\r\n}\r\n"
  }, {
    "time" : "2024-10-16T10:39:48.303413200",
    "content" : "package com.example.demo.git;\r\n\r\nimport com.intellij.openapi.actionSystem.AnAction;\r\nimport com.intellij.openapi.actionSystem.AnActionEvent;\r\nimport groovyjarjarantlr4.v4.runtime.misc.NotNull;\r\nimport org.eclipse.jgit.api.errors.GitAPIException;\r\n\r\nimport java.io.IOException;\r\nimport java.util.concurrent.Executors;\r\nimport java.util.concurrent.ScheduledExecutorService;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\npublic class initialGitCommit extends AnAction {\r\n\r\n\r\n    private boolean isRunning = false;\r\n    private ScheduledExecutorService scheduler;\r\n    private static String oldBranch;\r\n\r\n    @Override\r\n    public void actionPerformed(AnActionEvent e) {\r\n        System.out.println(\"开始InitialGitCommit\");\r\n        try{\r\n            if (isRunning) {\r\n                System.out.println(\"isRunning\");\r\n                stopScheduler();\r\n            } else {\r\n                System.out.println(\"notRunning\");\r\n                startScheduler();\r\n            }\r\n            isRunning = !isRunning;\r\n        }\r\n        catch (GitAPIException ex){\r\n            ex.printStackTrace();\r\n        }\r\n        catch (IOException ex2){\r\n            ex2.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void startScheduler() {\r\n        try {\r\n            initGit();\r\n            scheduler = Executors.newScheduledThreadPool(1);\r\n            scheduler.scheduleAtFixedRate(() -> {\r\n                try {\r\n                    Commit();\r\n                } catch (GitAPIException | IOException e) {\r\n                    // 处理异常，例如打印日志\r\n                    e.printStackTrace();\r\n                }\r\n            }, 0, 10, TimeUnit.SECONDS);\r\n        } catch (GitAPIException | IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void initGit() throws GitAPIException, IOException {\r\n        System.out.println(\"initGit\");\r\n        oldBranch = gitRepository.getInstance().getRepository().getBranch();\r\n        System.out.println(oldBranch);\r\n        gitAction.createBranch(gitRepository.getInstance());\r\n    }\r\n\r\n    public void Commit() throws GitAPIException, IOException {\r\n        System.out.println(\"Commit\");\r\n        gitAction.commit(gitRepository.getInstance());\r\n    }\r\n\r\n    public void stopScheduler() throws GitAPIException, IOException {\r\n        if (scheduler != null && !scheduler.isShutdown()) {\r\n            scheduler.shutdownNow();\r\n        }\r\n        gitAction.mergeLast(gitRepository.getInstance(), oldBranch);\r\n    }\r\n\r\n    @Override\r\n    public void update(@NotNull AnActionEvent e) {\r\n        e.getPresentation().setText(isRunning ? \"停止定时commit\" : \"启动定时commit\");\r\n    }\r\n\r\n}\r\n"
  } ],
  "version" : 4
}