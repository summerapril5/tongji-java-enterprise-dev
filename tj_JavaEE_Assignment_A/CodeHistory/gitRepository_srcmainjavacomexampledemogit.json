{
  "fileName": "gitRepository.java",
  "filePath": "\\src\\main\\java\\com\\example\\demo\\git",
  "information": [
    {
      "time": "2024-10-16T00:53:18.253143800",
      "content": "package com.example.demo.git;\r\n\r\nimport com.example.demo.util.FileManager;\r\nimport org.eclipse.jgit.api.Git;\r\nimport org.eclipse.jgit.api.errors.GitAPIException;\r\nimport org.eclipse.jgit.lib.Repository;\r\nimport java.io.IOException;\r\nimport org.eclipse.jgit.storage.file.FileRepositoryBuilder;\r\nimport java.io.File;\r\n\r\npublic class gitRepository {\r\n\r\n    private static Git git;\r\n\r\n    private gitRepository(){};\r\n\r\n\r\n/**\r\n * 单例获取实例方法\r\n * */\r\n    public static Git getInstance() throws GitAPIException, IOException {\r\n        if(git \u003d\u003d null){\r\n            File projectPath\u003dgetGitPath();\r\n            if(!isPathExist(projectPath)){\r\n                createRepository(projectPath);\r\n            }//当前项目内不存在仓库\r\n            else{\r\n                FileRepositoryBuilder builder \u003d new FileRepositoryBuilder();\r\n                try(Repository repo \u003d builder.setGitDir(projectPath)\r\n                        .readEnvironment().findGitDir().build())\r\n                {\r\n                    git \u003d new Git(repo);\r\n                }\r\n            }//当前项目存在仓库\r\n        }\r\n        return git;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * 判断该路径下是否存在本地仓库\r\n     * @param projectPath 文件获取绝对路径路径\r\n     * @return 布尔值\r\n     * */\r\n    public static boolean isPathExist(File projectPath)\r\n    {\r\n        File gitDir \u003d new File(projectPath, \".git\");\r\n        //.git子文件夹\r\n        return gitDir.exists()\u0026\u0026gitDir.isDirectory();\r\n    }\r\n\r\n    /**\r\n     * 创建本地仓库\r\n     */\r\n    public static void createRepository(File gitDir) throws GitAPIException , IOException{\r\n      try{\r\n\r\n          git \u003d Git.init().setDirectory(gitDir).call();\r\n      }\r\n      catch(GitAPIException e)\r\n      {\r\n          e.printStackTrace();\r\n      }\r\n    }\r\n    /**\r\n     * 通过在本目录下创造临时文件获取绝对目录 ，再删除文件达到无影响。\r\n     *\r\n     * */\r\n    public static File getGitPath() throws IOException\r\n    {\r\n        File localPath \u003d File.createTempFile(\"TestGitRepository\", \"\");\r\n        if(!localPath.delete())\r\n        {\r\n            throw new IOException(\"Could not delete temporary file \" + localPath);\r\n        }\r\n        return localPath;\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n"
    }
  ],
  "version": 0
}